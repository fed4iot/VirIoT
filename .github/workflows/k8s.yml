name: "k8s CI"
on: [pull_request, push]

jobs:
  tv-helloworld:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: ["", "-runu"]
    steps:
    - uses: actions/checkout@master
    - name: pkg install
      run: |
        sudo apt-get install -y python3-setuptools mosquitto-clients
        sudo pip3 install PyYAML argcomplete
    - uses: engineerd/setup-kind@v0.5.0
      with:
          config: "utils/kind-cluster.yaml"
          image: "thehajime/node-runu:v1.17.0"
    - name: runtime configuration
      run: |
        curl https://raw.githubusercontent.com/ukontainer/runu/master/k8s/ukontainer-runtimeclass.yaml | kubectl apply -f -
    - name: thingvisor setup
      run: |
        MC_ADDR=172.17.0.2
        kubectl label nodes kind-control-plane viriot-gw=$MC_ADDR
        kubectl label nodes kind-control-plane viriot-zone=default
        
        kubectl label nodes kind-control-plane viriot-zone-gw=true
        
        kubectl apply -f ./yaml/viriot-configmap-setup.yaml
        kubectl apply -f ./yaml/mongo-statefulset-noauth.yaml
        kubectl apply -f ./yaml/vernemq-affinity-nodeport.yaml
        sleep 15
        kubectl apply -f ./yaml/master-controller.yaml
        sleep 50
        MC_PORT=`kubectl get svc -o wide  |grep master-contro | awk '{print $5}' | cut -d':' -f2 | cut -d'/' -f1`
        cd CLI
        ./f4i.py login -u admin -p passw0rd -c http://$MC_ADDR:$MC_PORT
        ./f4i.py add-thingvisor -y ../yaml/thingVisor-helloWorld${{ matrix.runtime }}.yaml -c http://$MC_ADDR:$MC_PORT -n helloworld-tv
        ./f4i.py add-thingvisor -y ../yaml/thingVisor-weather.yaml -n weather -c http://$MC_ADDR:$MC_PORT
        sleep 15
        ./f4i.py list-thingvisors -c http://$MC_ADDR:$MC_PORT
        ./f4i.py inspect-thingvisor -c http://$MC_ADDR:$MC_PORT
        cd ..
#    - name: Setup tmate session for debug
#      uses: mxschmitt/action-tmate@v2
    - name: thingvisor test
      run: |
        #MQ_IP=`kubectl get svc -o wide  |grep vernemq-mqtt | awk '{print $3}' | cut -d':' -f2 | cut -d'/' -f1`
        MQ_PORT=`kubectl get svc -o wide  |grep vernemq-mqtt | awk '{print $5}' | cut -d':' -f2 | cut -d'/' -f1`
        mosquitto_sub -C 3 -v -h 172.17.0.2 -p $MQ_PORT -t 'vThing/helloworld-tv/hello/data_out'
    - name: collect logs
      if: always()
      run: |
        kind export logs logs
        docker exec -i kind-control-plane cat /etc/containerd/config.toml
        docker exec -i kind-control-plane ip ad |& tee logs/kind-ip-addr.txt
        kubectl logs mongodb-mc-noauth-0 > logs/k8s-mongo.txt
        kubectl logs f4i-master-controller-ss-0
        kubectl logs deployment/f4i-tv-helloworld${{ matrix.runtime }}-helloworld-tv
        kubectl cluster-info |& tee logs/cluster-info.txt
        kubectl get pods -o wide -A |& tee logs/pods-info.txt
        kubectl get nodes -o wide |& tee logs/nodes-info.txt
        kubectl get deployment -o wide |& tee logs/deployment-info.txt
        kubectl get svc -o wide |& tee logs/deployment-info.txt
        kubectl describe runtimeclasses.node.k8s.io |& tee logs/runtime-info.txt
        sudo netstat -anp |& grep tcp > logs/netstat.txt
        ip route |& tee logs/iproute.txt
        ip addr |& tee logs/ipaddr.txt
        docker ps |& tee logs/docker-ps.txt
    - uses: actions/upload-artifact@v1
      if: always()
      with:
        name: KinD-log
        path: logs
